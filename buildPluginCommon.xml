<?xml version="1.0" encoding="UTF-8"?>
<project name="x10dt.pluginCommon" basedir=".">
	<!-- Deprecated: no plugin should be picking up their version #'s from here -->
	<property name="plugin.version.prefix31" value="1.0"/>
	<property name="plugin.version.prefix32" value="3.2"/>
	<property name="plugin.version.suffix" value="70"/>
	<property name="plugins.version.31" value="${plugin.version.prefix31}.${plugin.version.suffix}"/>
	<property name="plugins.version.32" value="${plugin.version.prefix32}.${plugin.version.suffix}"/>

	<target name="properties" if="eclipse.running">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
	</target>

	<target name="init" depends="properties">
		<loadfile property="plugin.id" srcfile="META-INF/MANIFEST.MF">
			<filterchain>
				<containsregex pattern="Bundle-SymbolicName:"/>
				<replaceregex pattern="Bundle-SymbolicName: ([^;]*)(;.*)?" replace="\1"/>
				<striplinebreaks/>
			</filterchain>
		</loadfile>
		<!-- <echo message="Plugin ID = ${plugin.id}"/> -->

		<loadfile property="plugin.version" srcfile="META-INF/MANIFEST.MF">
			<filterchain>
				<containsregex pattern="Bundle-Version:"/>
				<replaceregex pattern="Bundle-Version: (.*)" replace="\1"/>
				<striplinebreaks/>
			</filterchain>
		</loadfile>
		<!-- <echo message="Plugin version = ${plugin.version}"/> -->

		<property name="plugin.jar.name" value="${plugin.id}_${plugin.version}.jar"/>
		<property name="plugin.zip.name" value="${plugin.id}_${plugin.version}.zip"/>
		<property name="plugin.src.zip" value="${plugin.id}src.zip"/>
		<property name="plugin.destination" value="${basedir}"/>
		<condition property="pluginTemp" value="${buildTempFolder}/plugins">
			<isset property="buildTempFolder"/>
		</condition>
		<property name="pluginTemp" value="${basedir}"/>
		<condition property="build.result.folder" value="${pluginTemp}/${plugin.id}">
			<isset property="buildTempFolder"/>
		</condition>
		<property name="build.result.folder" value="${basedir}"/>
		<property name="temp.folder" value="${basedir}/temp.folder"/>

		<!-- LPG-related properties for plugins with grammar files -->
		<property name="lpg.location" value="../lpg.runtime.java"/>
		<property name="lpg.executable" location="../lpg.generator.${baseos}_${os.arch}/lpgexe/lpg-${baseos}_${os.arch}"/>
		<property name="lpg.templates" location="${lpg.location}/templates"/>
		<property name="lpg.metatooling.location" value="../org.eclipse.imp.lpg.metatooling"/>
		<property name="lpg.metatooling.templates" location="${lpg.metatooling.location}/templates"/>
	</target>

	<target name="javaInit" description="Initializes compiler settings from bundle meta-data">
		<loadfile property="javacSource" srcfile=".settings/org.eclipse.jdt.core.prefs">
			<filterchain>
				<containsregex pattern="org.eclipse.jdt.core.compiler.source"/>
				<replaceregex pattern="org.eclipse.jdt.core.compiler.source=(.*)" replace="\1"/>
				<striplinebreaks/>
			</filterchain>
		</loadfile>
		<echo message="Java source compatibility = ${javacSource}"/>

		<loadfile property="javacTarget" srcfile=".settings/org.eclipse.jdt.core.prefs">
			<filterchain>
				<containsregex pattern="org.eclipse.jdt.core.compiler.codegen.targetPlatform"/>
				<replaceregex pattern="org.eclipse.jdt.core.compiler.codegen.targetPlatform=(.*)" replace="\1"/>
				<striplinebreaks/>
			</filterchain>
		</loadfile>
		<echo message="Java target compatibility = ${javacTarget}"/>

		<property name="compilerArg" value=""/>

		<loadfile property="plugin.dependencies" srcfile="META-INF/MANIFEST.MF">
			<filterchain>
				<tokenfilter>
					<filetokenizer/>
					<replaceregex pattern=",[\r\n]* *" replace="," flags="gs"/>
				</tokenfilter>
				<containsregex pattern="Require-Bundle: "/>
				<replaceregex pattern="Require-Bundle: (.*)" replace="\1"/>
				<!-- Filter out Eclipse plugins that are handled by eclipse.build.path -->
				<replaceregex pattern="org\.eclipse\.compare[^,]*,?" replace="" flags="g"/>
				<replaceregex pattern="org\.eclipse\.core[^,]*,?"    replace="" flags="g"/>
				<replaceregex pattern="org\.eclipse\.jdt[^,]*,?"     replace="" flags="g"/>
				<replaceregex pattern="org\.eclipse\.jface[^,]*,?"   replace="" flags="g"/>
				<replaceregex pattern="org\.eclipse\.ltk[^,]*,?"     replace="" flags="g"/>
				<replaceregex pattern="org\.eclipse\.pde[^,]*,?"     replace="" flags="g"/>
				<replaceregex pattern="org\.eclipse\.search[^,]*,?"  replace="" flags="g"/>
				<replaceregex pattern="org\.eclipse\.team[^,]*,?"    replace="" flags="g"/>
				<replaceregex pattern="org\.eclipse\.text[^,]*,?"    replace="" flags="g"/>
				<replaceregex pattern="org\.eclipse\.ui[^,]*,?"      replace="" flags="g"/>
				<replaceregex pattern="org\.junit[^,]*,?"            replace="" flags="g"/>
				<!-- Make dependencies on "local" (non-Eclipse) plugins use a relative path -->
				<replaceregex pattern="lpg.runtime,?" replace="lpg.runtime.java,"/>
				<replaceregex pattern="([a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*),?" replace="../\1/bin;../\1/classes;" flags="g"/>
			</filterchain>
		</loadfile>
		<echo message="Non-Eclipse Plugin dependencies:"/>
		<echo message="${plugin.dependencies}"/>
	</target>

	<target name="build.update.jar" depends="init" description="Build the plug-in: ${plugin.name} for an update site.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
<!--		<antcall target="build.sources"/> -->
		<delete dir="${temp.folder}"/>
	</target>

	<target name="build.jars" depends="init" description="Build all the jars for the plug-in: ${plugin.name}.">
		<available property="plugin.jar" file="${build.result.folder}/${plugin.jar.name}"/>
		<antcall target="plugin.jar"/>
	</target>

	<target name="publish" depends="init">
		<copy todir="../../artifacts" file="${plugin.name}_${plugin.version}.jar"/>
	</target>

	<target name="build.sources" depends="init">
		<available property="${plugin.src.zip}" file="${build.result.folder}/${plugin.src.zip}"/>
		<antcall target="pluginsrc.zip"/>
	</target>

	<target name="pluginsrc.zip" depends="init" unless="${plugin.src.zip}">
		<mkdir dir="${build.result.folder}"/>
		<zip destfile="${build.result.folder}/${plugin.src.zip}" filesonly="false" whenempty="skip" update="false">
			<fileset dir="src/" includes="**/*.java"/>
		</zip>
	</target>

	<target name="gather.sources" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${plugin.name}_${plugin.version}"/>
		<copy file="${build.result.folder}/${plugin.src.zip}" todir="${destination.temp.folder}/${plugin.name}_${plugin.version}" failonerror="false" overwrite="false"/>
		<copy todir="${destination.temp.folder}/${plugin.name}_${plugin.version}" failonerror="false" overwrite="false">
			<fileset dir="${basedir}" includes="icons/,plugin.xml,src/,build.properties,.project,.cvsignore,.classpath"			/>
		</copy>
	</target>

	<target name="gather.logs" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${plugin.name}_${plugin.version}"/>
		<copy file="${temp.folder}/${plugin.jar.name}.bin.log" todir="${destination.temp.folder}/${plugin.name}_${plugin.version}" failonerror="false" overwrite="false"/>
	</target>

	<target name="clean" depends="init" description="Clean the plug-in: ${plugin.name} of all the zips, jars and logs created.">
		<delete file="${build.result.folder}/${plugin.jar.name}"/>
		<delete file="${build.result.folder}/${plugin.src.zip}"/>
		<delete file="${plugin.destination}/${plugin.name}_${plugin.version}.jar"/>
		<delete file="${plugin.destination}/${plugin.name}_${plugin.version}.zip"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="refresh" depends="init" if="eclipse.running" description="Refresh this folder.">
		<eclipse.convertPath fileSystemPath="e:/rmf/eclipse/workspaces/safari/${plugin.name}" property="resourcePath"/>
		<eclipse.refreshLocal resource="${resourcePath}" depth="infinite"/>
	</target>

	<target name="zip.plugin" depends="init" description="Create a zip containing all the elements for the plug-in: ${plugin.name}.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="build.sources"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<antcall target="gather.sources">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<delete>
			<fileset dir="${temp.folder}" includes="**/*.bin.log"			/>
		</delete>
		<zip destfile="${plugin.destination}/${plugin.name}_${plugin.version}.zip" basedir="${temp.folder}" filesonly="true" whenempty="skip" update="false"/>
		<delete dir="${temp.folder}"/>
	</target>
</project>

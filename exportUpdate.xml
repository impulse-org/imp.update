<?xml version="1.0" encoding="UTF-8"?>
<project name="org.eclipse.imp.update" default="collect.update" basedir=".">
	<import file="./buildCommon.xml"/>

    <target name="init.for.collect">
        <tstamp>
            <format property="build.time" pattern="yyyyMMddHHmm"/> 
        </tstamp>
        <property name="imp.build.qualifier" value="v${build.time}"/>
    </target>

    <target name="init.common">
        <echo message="Build qualifier is ${imp.build.qualifier}"/>

        <property name="update.name"        value="org.eclipse.imp.update"/>
        <property name="update.version"     value="0.1.105"/> <!-- what to do here??? -->
        <property name="update.temp.folder" value="${basedir}/update.temp.folder"/>
        <property name="update.destination" value="${basedir}"/>
        <property name="update.server"      value="dev.eclipse.org"/>
        <property name="update.server.dir"  value=""/>
        <property name="zip.file"           value="${update.destination}/${update.name}_${update.version}.zip"/>

        <!-- Fix the following to use the build qualifier that gets read in, once we reorganize things
             to avoid executing the stuff in buildCommon.xml that *always* recomputes the build qualifier.
             I.e., substitute ${update.version} for vYYYYMMddHHmm in the following line.
          -->
        <property name="zip.file"           value="${update.destination}/${update.name}_vYYYYMMddHHmm.zip"/>
    </target>

    <target name="init.for.zip">
       <loadfile property="imp.build.qualifier" srcfile=".build.qualifier"/>
       <!-- <echo message="build qualifier is ${imp.build.qualifier}"/> -->
    </target>

	<property
		name="feature.list"
		value="org.eclipse.imp.analysis,org.eclipse.imp.analysis.ui,org.eclipse.imp.formatting,org.eclipse.imp.java.hosted,org.eclipse.imp.lpg,org.eclipse.imp.metatooling,org.eclipse.imp.runtime"/>

	<target name="publish.zip" depends="init.for.zip,init.common" description="Copies the update archive to the update server.">
		<echo message="Copying update zip file to update server ${update.server}"/>
		<scp file="${zip.file}" keyfile="${user.home}/.ssh/id_dsa" passphrase="" todir="${user.name}@${update.server}:${update.server.dir}"></scp>
	</target>

    <!-- The following target doesn't currently work properly, since one really needs to
         update the site.xml manually to add the new feature versions *before* building
         the .zip file. This is because it seems problematic to write in Ant the logic
         needed to remove the old builds of the current versions of the features in the
         site, and we don't really want the site.xml to accumulate every build of every
         feature, each time we run the build script.
    <target name="build.update.zip">
        <antcall target="collect.update"/>
        <antcall target="zip.update"/>
    </target>
     -->

   <!-- One would typically run this target, then manually edit the site.xml to add the
        new feature versions, and finally run 'zip.update' to build the update site archive. -->
   <target name="collect.update" depends="init.for.collect,init.common" description="Builds and collects all the feature and plugin components for the update site.">
        <delete dir="${update.temp.folder}"/>
        <mkdir dir="${update.temp.folder}"/>
        <antcall target="export.features"/>
        <for param="feature" values="${feature.list}">
            <antcall target="copy.feature">
                <param name="feature.name"    value="${feature}"/>
                <param name="feature.dir"     value="../${feature}.feature"/>
            </antcall>
        </for>

        <copy file="site.xml" todir="${update.temp.folder}" failonerror="true" overwrite="false"/>
        <copy file="index.html" todir="${update.temp.folder}" failonerror="true" overwrite="false"/>

        <mkdir dir="${update.temp.folder}/web"/>
        <copy todir="${update.temp.folder}/web" failonerror="true" overwrite="false">
            <fileset dir="${basedir}/web" includes="site.css"/>
            <fileset dir="${basedir}/web" includes="site.xsl"/>
        </copy>

        <antcall target="get.lpg.artifacts"/>
        <antcall target="get.polyglot.artifacts"/>

        <!-- save the build qualifier to be used in the zip.update target -->
        <echo message="${imp.build.qualifier}" file=".build.qualifier"/>
    </target>

   <target name="zip.update" depends="init.for.zip,init.common" description="Creates the update site archive from the components collected by collect.update">
       <loadfile property="saved.build.qualifier" srcfile=".build.qualifier"/>
       <propertyRegexp name="imp.version.prefix" input="${imp.feature(version)}" regexp="(.*).qualifier" value="\1"/>
       <echo message="*** The saved build qualifier is ... the envelope please... ${saved.build.qualifier}"/>
       <property name="zip.file.name" value="${update.destination}/${update.name}_${imp.version.prefix}.${saved.build.qualifier}.zip"/>

       <zip destfile="${zip.file.name}" basedir="${update.temp.folder}" filesonly="false" whenempty="skip" update="false"/>

       <delete dir="${update.temp.folder}"/>
    </target>

	<target name="copy.feature">
        <xmlproperty file="${feature.dir}/feature.xml" prefix="f"/>

		<echo message="  ** Copying contents of feature ${feature.name} version ${f.feature(version)} from directory ${feature.dir}"/>

		<propertyRegexp name="feature.version" input="${f.feature(version)}" regexp="(.*).qualifier" value="\1.${imp.build.qualifier}"/>

		<mkdir dir="${update.temp.folder}/features"/>
		<copy todir="${update.temp.folder}/features" failonerror="true" overwrite="false">
			<fileset dir="${feature.dir}" includes="${feature.name}_${feature.version}.jar,${feature.name}.source_${feature.version}.jar"/>
		</copy>

		<mkdir dir="${update.temp.folder}/plugins"/>
		<copy todir="${update.temp.folder}/plugins" failonerror="true" overwrite="false">
			<fileset dir="${feature.dir}/plugins" includes="*.jar"/>
		</copy>
	</target>

    <target name="get.lpg.artifacts">
        <delete dir="../lpg.update/plugins" includes="*.jar"/>
        <delete dir="../lpg.update/features" includes="*.jar"/>

        <ant antfile="../lpg.update/exportUpdate.xml" target="build.plugins"/>
        <ant antfile="../lpg.update/exportUpdate.xml" target="build.features"/>

        <copy todir="${update.temp.folder}/plugins" failonerror="true" overwrite="false">
           <fileset dir="../lpg.update/plugins" includes="*.jar"/>
        </copy>
        <copy todir="${update.temp.folder}/features" failonerror="true" overwrite="false">
            <fileset dir="../lpg.update/features" includes="*.jar"/>
        </copy>
    </target>

    <target name="get.polyglot.artifacts">
        <!-- The name of the IMP project containing the Polyglot source snapshot is "polyglot2". -->
        <delete dir="../polyglot/eclipseUpdates/plugins" includes="*.jar"/>
        <delete dir="../polyglot/eclipseUpdates/features" includes="*.jar"/>

        <ant antfile="../polyglot/build.xml" dir="../polyglot" target="build-plugin"/>
        <ant antfile="../polyglot/build.xml" dir="../polyglot" target="build-features"/>

        <copy todir="${update.temp.folder}/plugins" failonerror="true" overwrite="false">
           <fileset dir="../polyglot/eclipseUpdates/plugins" includes="polyglot_*.jar"/>
        </copy>
        <copy todir="${update.temp.folder}/features" failonerror="true" overwrite="false">
           <fileset dir="../polyglot/eclipseUpdates/features" includes="polyglot_*.jar"/>
        </copy>
    </target>

    <target name="export.features">
		<echo message="Building feature jars for ${feature.list}..."/>
		<for param="feature" values="${feature.list}">
		    <echo message="*** Building feature ${feature} ***"/>
			<ant antfile="../${feature}.feature/exportFeature.xml" target="build.feature.jar" dir="../${feature}.feature">
                <property name="imp.build.qualifier" value="${imp.build.qualifier}"/>
			</ant>
		</for>
		<echo message="Done building feature jars."/>
	</target>
</project>

<?xml version="1.0" encoding="UTF-8"?>
<project name="pluginCommon" basedir=".">
	<property name="plugin.version.prefix31" value="1.0"/>
	<property name="plugin.version.prefix32" value="3.2"/>
	<property name="plugin.version.suffix" value="66"/>
	<property name="plugins.version.31" value="${plugin.version.prefix31}.${plugin.version.suffix}"/>
	<property name="plugins.version.32" value="${plugin.version.prefix32}.${plugin.version.suffix}"/>

	<target name="build.update.jar" depends="init" description="Build the plug-in: ${plugin.name} for an update site.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
<!--		<antcall target="build.sources"/> -->
		<delete dir="${temp.folder}"/>
	</target>

	<target name="build.jars" depends="init" description="Build all the jars for the plug-in: ${plugin.name}.">
		<available property="plugin.jar" file="${build.result.folder}/${plugin.jar.name}"/>
		<antcall target="plugin.jar"/>
	</target>

	<target name="publish" depends="init">
		<copy todir="../../artifacts" file="${plugin.name}_${plugin.version}.jar"/>
	</target>

	<target name="build.sources" depends="init">
		<available property="${plugin.src.zip}" file="${build.result.folder}/${plugin.src.zip}"/>
		<antcall target="pluginsrc.zip"/>
	</target>

	<target name="pluginsrc.zip" depends="init" unless="${plugin.src.zip}">
		<mkdir dir="${build.result.folder}"/>
		<zip destfile="${build.result.folder}/${plugin.src.zip}" filesonly="false" whenempty="skip" update="false">
			<fileset dir="src/" includes="**/*.java"/>
		</zip>
	</target>

	<target name="gather.sources" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${plugin.name}_${plugin.version}"/>
		<copy file="${build.result.folder}/${plugin.src.zip}" todir="${destination.temp.folder}/${plugin.name}_${plugin.version}" failonerror="false" overwrite="false"/>
		<copy todir="${destination.temp.folder}/${plugin.name}_${plugin.version}" failonerror="false" overwrite="false">
			<fileset dir="${basedir}" includes="icons/,plugin.xml,src/,build.properties,.project,.cvsignore,.classpath"			/>
		</copy>
	</target>

	<target name="gather.logs" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${plugin.name}_${plugin.version}"/>
		<copy file="${temp.folder}/${plugin.jar.name}.bin.log" todir="${destination.temp.folder}/${plugin.name}_${plugin.version}" failonerror="false" overwrite="false"/>
	</target>

	<target name="clean" depends="init" description="Clean the plug-in: ${plugin.name} of all the zips, jars and logs created.">
		<delete file="${build.result.folder}/${plugin.jar.name}"/>
		<delete file="${build.result.folder}/${plugin.src.zip}"/>
		<delete file="${plugin.destination}/${plugin.name}_${plugin.version}.jar"/>
		<delete file="${plugin.destination}/${plugin.name}_${plugin.version}.zip"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="refresh" depends="init" if="eclipse.running" description="Refresh this folder.">
		<eclipse.convertPath fileSystemPath="e:/rmf/eclipse/workspaces/safari/${plugin.name}" property="resourcePath"/>
		<eclipse.refreshLocal resource="${resourcePath}" depth="infinite"/>
	</target>

	<target name="zip.plugin" depends="init" description="Create a zip containing all the elements for the plug-in: ${plugin.name}.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="build.sources"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<antcall target="gather.sources">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<delete>
			<fileset dir="${temp.folder}" includes="**/*.bin.log"			/>
		</delete>
		<zip destfile="${plugin.destination}/${plugin.name}_${plugin.version}.zip" basedir="${temp.folder}" filesonly="true" whenempty="skip" update="false"/>
		<delete dir="${temp.folder}"/>
	</target>
</project>
